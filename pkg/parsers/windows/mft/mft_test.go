// Copyright (c) 2020 Alec Randazzo

package mft

import (
	"github.com/google/go-cmp/cmp"
	"reflect"
	"testing"
	"time"
)

func TestRawMasterFileTableRecord_TrimSlackSpace(t *testing.T) {
	tests := []struct {
		name  string
		want  []byte
		input []byte
	}{
		{
			name:  "test1",
			input: []byte{0xba, 0xdb, 0xff, 0xff, 0xff, 0xff, 0x00},
			want:  []byte{0xba, 0xdb},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := trimSlackSpace(tt.input)
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Test %v failed \ngot = %v, \nwant = %v", tt.name, got, tt.want)
			}
		})
	}
}

func Test_ParseMftRecord(t *testing.T) {
	type args struct {
		bytesPerCluster int64
		rawMftRecord    []byte
	}
	tests := []struct {
		name          string
		args          args
		wantMftRecord MasterFileTableRecord
		wantErr       bool
	}{
		{
			name: "test1",
			args: args{
				rawMftRecord:    []byte{70, 73, 76, 69, 48, 0, 3, 0, 113, 250, 76, 78, 8, 0, 0, 0, 1, 0, 1, 0, 56, 0, 1, 0, 216, 1, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 199, 5, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 96, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 72, 0, 0, 0, 24, 0, 0, 0, 102, 248, 4, 21, 205, 173, 211, 1, 102, 248, 4, 21, 205, 173, 211, 1, 102, 248, 4, 21, 205, 173, 211, 1, 102, 248, 4, 21, 205, 173, 211, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 104, 0, 0, 0, 0, 0, 24, 0, 0, 0, 3, 0, 74, 0, 0, 0, 24, 0, 1, 0, 5, 0, 0, 0, 0, 0, 5, 0, 102, 248, 4, 21, 205, 173, 211, 1, 102, 248, 4, 21, 205, 173, 211, 1, 102, 248, 4, 21, 205, 173, 211, 1, 102, 248, 4, 21, 205, 173, 211, 1, 0, 64, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 4, 3, 36, 0, 77, 0, 70, 0, 84, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 128, 0, 0, 0, 1, 0, 64, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 81, 3, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 53, 0, 0, 0, 0, 0, 0, 32, 53, 0, 0, 0, 0, 0, 0, 32, 53, 0, 0, 0, 0, 51, 32, 200, 0, 0, 0, 12, 50, 96, 5, 194, 0, 56, 67, 16, 219, 0, 78, 89, 133, 0, 66, 176, 108, 91, 31, 119, 255, 66, 192, 69, 205, 200, 190, 0, 66, 0, 56, 8, 170, 148, 0, 66, 128, 80, 188, 200, 136, 1, 66, 64, 25, 2, 118, 2, 253, 66, 64, 85, 48, 135, 101, 2, 0, 176, 0, 0, 0, 80, 0, 0, 0, 1, 0, 64, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 192, 1, 0, 0, 0, 0, 0, 8, 176, 1, 0, 0, 0, 0, 0, 8, 176, 1, 0, 0, 0, 0, 0, 49, 25, 115, 210, 0, 65, 3, 176, 243, 197, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 8, 16, 0, 0, 0, 0, 0, 0, 8, 16, 0, 0, 0, 0, 0, 0, 49, 1, 255, 255, 11, 49, 1, 38, 0, 244, 0, 0, 0, 0, 199, 5, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 199, 5},
				bytesPerCluster: 4096,
			},
			wantErr: false,
			wantMftRecord: MasterFileTableRecord{
				RecordHeader: RecordHeader{
					AttributesOffset: 56,
					RecordNumber:     0,
					Flags: RecordHeaderFlags{
						FlagDeleted:   false,
						FlagDirectory: false,
					},
				},
				StandardInformationAttributes: StandardInformationAttribute{
					Created:      time.Date(2018, 2, 25, 00, 10, 45, 642455000, time.UTC),
					Modified:     time.Date(2018, 2, 25, 00, 10, 45, 642455000, time.UTC),
					Accessed:     time.Date(2018, 2, 25, 00, 10, 45, 642455000, time.UTC),
					Changed:      time.Date(2018, 2, 25, 00, 10, 45, 642455000, time.UTC),
					FlagResident: true,
				},
				FileNameAttributes: FileNameAttributes{
					0: FileNameAttribute{
						Created:                 time.Date(2018, 2, 25, 00, 10, 45, 642455000, time.UTC),
						Modified:                time.Date(2018, 2, 25, 00, 10, 45, 642455000, time.UTC),
						Accessed:                time.Date(2018, 2, 25, 00, 10, 45, 642455000, time.UTC),
						Changed:                 time.Date(2018, 2, 25, 00, 10, 45, 642455000, time.UTC),
						FlagResident:            true,
						NameLength:              NameLength{},
						AttributeSize:           104,
						ParentDirRecordNumber:   5,
						ParentDirSequenceNumber: 5,
						LogicalFileSize:         16384,
						PhysicalFileSize:        16384,
						FileNameFlags: FileNameFlags{
							ReadOnly:          false,
							Hidden:            true,
							System:            true,
							Archive:           false,
							Device:            false,
							Normal:            false,
							Temporary:         false,
							Sparse:            false,
							Reparse:           false,
							Compressed:        false,
							Offline:           false,
							NotContentIndexed: false,
							Encrypted:         false,
							Directory:         false,
							IndexView:         false,
						},
						FileNameLength: 8,
						FileNamespace:  "WIN32 & DOS",
						FileName:       "$MFT",
					},
				},
				DataAttribute: DataAttribute{
					TotalSize:             0,
					FlagResident:          false,
					ResidentDataAttribute: nil,
					NonResidentDataAttribute: NonResidentDataAttribute{
						DataRuns: DataRuns{
							0: DataRun{
								AbsoluteOffset: 3221225472,
								Length:         209846272,
							},
							1: DataRun{
								AbsoluteOffset: 18254405632,
								Length:         5636096,
							},
							2: DataRun{
								AbsoluteOffset: 54049964032,
								Length:         229703680,
							},
							3: DataRun{
								AbsoluteOffset: 17307185152,
								Length:         113967104,
							},
							4: DataRun{
								AbsoluteOffset: 68520476672,
								Length:         73138176,
							},
							5: DataRun{
								AbsoluteOffset: 108427214848,
								Length:         58720256,
							},
							6: DataRun{
								AbsoluteOffset: 213864398848,
								Length:         84410368,
							},
							7: DataRun{
								AbsoluteOffset: 8366579712,
								Length:         26476544,
							},
							8: DataRun{
								AbsoluteOffset: 173059268608,
								Length:         89391104,
							},
						},
					},
				},
				AttributeList: AttributeListAttributes{},
			},
		},
		{
			name:    "nil input",
			wantErr: true,
			args: args{
				bytesPerCluster: 4096,
				rawMftRecord:    nil,
			},
		},
		{
			name:    "input per cluster arg of 0",
			wantErr: true,
			args: args{
				bytesPerCluster: 0,
				rawMftRecord:    []byte{70, 73, 76, 69, 48, 0, 3, 0, 113, 250, 76, 78, 8, 0, 0, 0, 1, 0, 1, 0, 56, 0, 1, 0, 216, 1, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 199, 5, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 96, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 72, 0, 0, 0, 24, 0, 0, 0, 102, 248, 4, 21, 205, 173, 211, 1, 102, 248, 4, 21, 205, 173, 211, 1, 102, 248, 4, 21, 205, 173, 211, 1, 102, 248, 4, 21, 205, 173, 211, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 104, 0, 0, 0, 0, 0, 24, 0, 0, 0, 3, 0, 74, 0, 0, 0, 24, 0, 1, 0, 5, 0, 0, 0, 0, 0, 5, 0, 102, 248, 4, 21, 205, 173, 211, 1, 102, 248, 4, 21, 205, 173, 211, 1, 102, 248, 4, 21, 205, 173, 211, 1, 102, 248, 4, 21, 205, 173, 211, 1, 0, 64, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 4, 3, 36, 0, 77, 0, 70, 0, 84, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 128, 0, 0, 0, 1, 0, 64, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 81, 3, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 53, 0, 0, 0, 0, 0, 0, 32, 53, 0, 0, 0, 0, 0, 0, 32, 53, 0, 0, 0, 0, 51, 32, 200, 0, 0, 0, 12, 50, 96, 5, 194, 0, 56, 67, 16, 219, 0, 78, 89, 133, 0, 66, 176, 108, 91, 31, 119, 255, 66, 192, 69, 205, 200, 190, 0, 66, 0, 56, 8, 170, 148, 0, 66, 128, 80, 188, 200, 136, 1, 66, 64, 25, 2, 118, 2, 253, 66, 64, 85, 48, 135, 101, 2, 0, 176, 0, 0, 0, 80, 0, 0, 0, 1, 0, 64, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 192, 1, 0, 0, 0, 0, 0, 8, 176, 1, 0, 0, 0, 0, 0, 8, 176, 1, 0, 0, 0, 0, 0, 49, 25, 115, 210, 0, 65, 3, 176, 243, 197, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 8, 16, 0, 0, 0, 0, 0, 0, 8, 16, 0, 0, 0, 0, 0, 0, 49, 1, 255, 255, 11, 49, 1, 38, 0, 244, 0, 0, 0, 0, 199, 5, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 199, 5},
			},
		},
		{
			name:    "raw record not large enough 1",
			wantErr: true,
			args: args{
				bytesPerCluster: 4096,
				rawMftRecord:    []byte{70, 73, 76, 69, 48},
			},
		},
		{
			name:    "raw record not large enough 2",
			wantErr: true,
			args: args{
				bytesPerCluster: 4096,
				rawMftRecord:    []byte{70, 73, 76},
			},
		},
		{
			name:    "invalid mft record",
			wantErr: true,
			args: args{
				bytesPerCluster: 4096,
				rawMftRecord:    []byte{0, 73, 76, 69, 48, 0, 3, 0, 113, 250, 76, 78, 8, 0, 0, 0, 1, 0, 1, 0, 56, 0, 1, 0, 216, 1, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 199, 5, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 96, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 72, 0, 0, 0, 24, 0, 0, 0, 102, 248, 4, 21, 205, 173, 211, 1, 102, 248, 4, 21, 205, 173, 211, 1, 102, 248, 4, 21, 205, 173, 211, 1, 102, 248, 4, 21, 205, 173, 211, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 104, 0, 0, 0, 0, 0, 24, 0, 0, 0, 3, 0, 74, 0, 0, 0, 24, 0, 1, 0, 5, 0, 0, 0, 0, 0, 5, 0, 102, 248, 4, 21, 205, 173, 211, 1, 102, 248, 4, 21, 205, 173, 211, 1, 102, 248, 4, 21, 205, 173, 211, 1, 102, 248, 4, 21, 205, 173, 211, 1, 0, 64, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 4, 3, 36, 0, 77, 0, 70, 0, 84, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 128, 0, 0, 0, 1, 0, 64, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 81, 3, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 53, 0, 0, 0, 0, 0, 0, 32, 53, 0, 0, 0, 0, 0, 0, 32, 53, 0, 0, 0, 0, 51, 32, 200, 0, 0, 0, 12, 50, 96, 5, 194, 0, 56, 67, 16, 219, 0, 78, 89, 133, 0, 66, 176, 108, 91, 31, 119, 255, 66, 192, 69, 205, 200, 190, 0, 66, 0, 56, 8, 170, 148, 0, 66, 128, 80, 188, 200, 136, 1, 66, 64, 25, 2, 118, 2, 253, 66, 64, 85, 48, 135, 101, 2, 0, 176, 0, 0, 0, 80, 0, 0, 0, 1, 0, 64, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 192, 1, 0, 0, 0, 0, 0, 8, 176, 1, 0, 0, 0, 0, 0, 8, 176, 1, 0, 0, 0, 0, 0, 49, 25, 115, 210, 0, 65, 3, 176, 243, 197, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 8, 16, 0, 0, 0, 0, 0, 0, 8, 16, 0, 0, 0, 0, 0, 0, 49, 1, 255, 255, 11, 49, 1, 38, 0, 244, 0, 0, 0, 0, 199, 5, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 199, 5},
			},
		},
		{
			name:    "attribute offset in record header is 0",
			wantErr: true,
			args: args{
				bytesPerCluster: 4096,
				rawMftRecord:    []byte{70, 73, 76, 69, 48, 0, 3, 0, 113, 250, 76, 78, 8, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 216, 1, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 199, 5, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 96, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 72, 0, 0, 0, 24, 0, 0, 0, 102, 248, 4, 21, 205, 173, 211, 1, 102, 248, 4, 21, 205, 173, 211, 1, 102, 248, 4, 21, 205, 173, 211, 1, 102, 248, 4, 21, 205, 173, 211, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 104, 0, 0, 0, 0, 0, 24, 0, 0, 0, 3, 0, 74, 0, 0, 0, 24, 0, 1, 0, 5, 0, 0, 0, 0, 0, 5, 0, 102, 248, 4, 21, 205, 173, 211, 1, 102, 248, 4, 21, 205, 173, 211, 1, 102, 248, 4, 21, 205, 173, 211, 1, 102, 248, 4, 21, 205, 173, 211, 1, 0, 64, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 4, 3, 36, 0, 77, 0, 70, 0, 84, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 128, 0, 0, 0, 1, 0, 64, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 81, 3, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 53, 0, 0, 0, 0, 0, 0, 32, 53, 0, 0, 0, 0, 0, 0, 32, 53, 0, 0, 0, 0, 51, 32, 200, 0, 0, 0, 12, 50, 96, 5, 194, 0, 56, 67, 16, 219, 0, 78, 89, 133, 0, 66, 176, 108, 91, 31, 119, 255, 66, 192, 69, 205, 200, 190, 0, 66, 0, 56, 8, 170, 148, 0, 66, 128, 80, 188, 200, 136, 1, 66, 64, 25, 2, 118, 2, 253, 66, 64, 85, 48, 135, 101, 2, 0, 176, 0, 0, 0, 80, 0, 0, 0, 1, 0, 64, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 192, 1, 0, 0, 0, 0, 0, 8, 176, 1, 0, 0, 0, 0, 0, 8, 176, 1, 0, 0, 0, 0, 0, 49, 25, 115, 210, 0, 65, 3, 176, 243, 197, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 8, 16, 0, 0, 0, 0, 0, 0, 8, 16, 0, 0, 0, 0, 0, 0, 49, 1, 255, 255, 11, 49, 1, 38, 0, 244, 0, 0, 0, 0, 199, 5, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 199, 5},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotMftRecord, err := ParseMftRecord(tt.args.rawMftRecord, tt.args.bytesPerCluster)
			if (err != nil) != tt.wantErr {
				t.Errorf("parse() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotMftRecord, tt.wantMftRecord) {
				t.Errorf(cmp.Diff(gotMftRecord, tt.wantMftRecord))
			}
		})
	}
}
